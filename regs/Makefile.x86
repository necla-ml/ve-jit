#
## This WILL NOT compile with gcc-4.8.
#
# Code uses 'auto' keyword in places for very much better readability.
# It compiles under g++-5.4.0 with -std=c++11 some gnu extensions.
# For ncc, the same nice features need -std=c++14 or -std=c++17.
#
LIBRARY:=libjitregs.a
TARGETS:=oldSpill oldSymbStates oldSpill oldSpill2 oldSpill3 oldRegSym \
	testRegBase prt_regnames testSymScopeUid testScopedSpill0 \
	regSymbol2.chk spill2-impl.chk $(LIBRARY) \
	tSpill2 tSpill2b s2r testRegSym2
LIBOBJECTS:=spill2.o reg-base.o reg-aurora.o 
all: $(TARGETS) Goodbye

$(LIBRARY): $(LIBOBJECTS)
	$(AR) rcs $@ $^

PHONY: Goodbye
Goodbye:
	@echo 'All done, log files in *.vg'
	@echo 'Goodbye'

CXXFLAGS:=-g2 -O1 -std=c++11 -Wall
CXXFLAGS+= -I.
VE_EXEC:=
# Hmmm. maybe leave out the next lines
CC:=gcc
CXX:=g++

$(info test for c++14 ...)
is_std_c14_ok := $(shell touch foo.c && $(CXX) -std=c++14 -c foo.c -o foo.o 2>&1 > /dev/null && echo 'yes' || echo 'no'; rm -f foo.c foo.o)
ifeq ($(is_std_c14_ok), no)
$(info $(shell echo `$(CXX) --version`))
$(error $(CXX) -std=c++14 is not supported)
endif
$(info $(CC) -std=c++14? $(is_std_c14_ok))

#    $(info is_fopenmp_simd_supported=$(is_fopenmp_simd_supported))
#    GCC_VERSION:=$(shell $(CXX) -dumpversion) # oh, nc++ does not have dumpversion
#    ifeq ($(shell expr $(GCC_VERSION) '<=' 5.4), 1)
#    $(info $(shell echo `$(CXX) --version`))
#    $(error gcc version may be too old -- need some c++14 auto features )
#    endif

is_valgrind_ok := $(shell touch foo.c && valgrind --help 2>&1 > /dev/null && echo 'yes' || echo 'no'; rm -f foo.c foo.o)
$(info valgrind? <$(is_valgrind_ok)>)
ifeq ($(is_valgrind_ok), yes)
vg = $(if $filter($(is_valgrind_ok),yes), \
     valgrind --leak-check=full --show-leak-kinds=all --suppressions=./dl_init.supp ./$@ > $@.vg 2>&1 \
     && { echo "gawking summary..." \
     && gawk 'BEGIN{err=-1} /^==.*(LEAK|HEAP) SUMMARY/{p=1;err=0} /^Goodbye/{p=1;err=0} p==13&&/^[^=]/{p=0} p==1{print} END{exit err}' $@.vg; } \
     || { echo "Ohoh: $@ did not terminate correcly"; echo "see $@.vg"; } \
     , $(VE_EXEC) ./$@ > $@.vg)
else
vg = $(VE_EXEC) ./$@ > $@.vg
endif


C11X:=-std=gnu++1z
#C11Y:=-std=gnu++17
# c++14 allows auto to deduce return type from 'return' statement.
# one instance where this was nice was downgraded to harwire a return type.
C11Y:=-std=gnu++1z
#
# Following is *not* enough.  g++-4.8 is too ancient.
#C11X:=-std=gnu++11
#C11Y:=-std=gnu++11
# also OK, and more portable:
C11X:=-std=c++14
C11Y:=-std=c++14

reg-base.o: reg-base.cpp reg-base.hpp bitfield.hpp throw.hpp
	$(CXX) -o $@ $(CXXFLAGS) $(C11X) -c $<
reg-aurora.o: reg-aurora.cpp reg-aurora.hpp reg-base.hpp bitfield.hpp throw.hpp
	$(CXX) -o $@ $(CXXFLAGS) $(C11Y) -c $<
spill2.o: spill2.cpp spill2.hpp spill2-impl.hpp throw.hpp reg-base.hpp
	$(CXX) -o $@ $(CXXFLAGS) $(C11X) -c $<

# header compilation check:
regSymbol2.chk: regSymbol2.hpp # see if the header makes sense: what is missing?
	$(CXX) -o $<.o $(CXXFLAGS) $(C11X) -c $<
	rm -f $<.o; touch $@
spill2-impl.chk: spill2-impl.hpp # see if the header makes sense: what is missing?
	$(CXX) -o $<.o $(CXXFLAGS) $(C11X) -c $<
	rm -f %<.o; touch $@
oldSymbStates.chk: oldSymbStates-hdr.cpp old/symbStates-old.hpp throw.hpp
	$(CXX) -o $<.o $(CXXFLAGS) -std=gnu++11 -c $<
	rm -f $<.o; touch $@

old-asm.o: old-asm.cpp old/asm-old.hpp throw.hpp
	$(CXX) -o $@ $(CXXFLAGS) -c $<

oldSpill: oldSpill.cpp old-asm.o
	$(CXX) -o $@ $(CXXFLAGS) $(C11X) $^
	$(call vg,$@)

testSymScopeUid: testSymScopeUid.cpp throw.hpp
	$(CXX) -o $@.i $(CXXFLAGS) -dD -E $<
	$(CXX) -o $@ $(CXXFLAGS) $(C11X) $^
	$(call vg)
s2r: s2r.hpp
	$(CXX) -o $@ $(CXXFLAGS) $(C11X) -DS2R_MAIN -x c++ $^
	$(call vg)
testScopedSpill0: testScopedSpill0.cpp symScopeUid.hpp scopedSpillableBase.hpp throw.hpp
	$(CXX) -o $@ $(CXXFLAGS) $(C11X) $(filter %.cpp,$^) $(filter %.o,$^) && echo YAY
	$(call vg)

old-spill.o: old-spill-hdr.cpp old/spill.hpp old/spill-impl.hpp old/symbStates-old.hpp throw.hpp old/regDefs.hpp
	$(CXX) -o $@ $(CXXFLAGS) $(C11X) -c $<

# test based on spillable-base.hpp
oldSpill2: oldSpill2.cpp old-spill-hdr.cpp old/spill-impl.hpp old/spill.hpp throw.hpp old/regDefs.hpp
	$(CXX) -o $@ $(CXXFLAGS) $(C11X) $(filter %.cpp,$^)
	$(call vg)
# new version...
tSpill2: tSpill2.cpp spill2.o spill2-impl.hpp spill2.hpp throw.hpp reg-base.hpp symScopeUid.hpp
	$(CXX) -o $@.i $(CXXFLAGS) $(C11X) -dD -E $<
	$(CXX) -o $@ $(CXXFLAGS) $(C11X) $(filter %.cpp,$^) $(filter %.o,$^)
	$(call vg)
# new: add name and register support to scoped symbols (expand basic symScopeUid functions)
tSpill2b: tSpill2b.cpp spill2.o reg-aurora.o reg-base.o spill2-impl.hpp spill2.hpp throw.hpp reg-base.hpp symScopeUid.hpp
	$(CXX) -o $@ $(CXXFLAGS) $(C11X) $(filter %.cpp,$^) $(filter %.o,$^)
	$(call vg)

oldStates.o: oldStates.cpp old/regStates.hpp throw.hpp
	$(CXX) -o $@ $(CXXFLAGS) $(C11X) -c $<

# test based on regSymbol.hpp
oldSpill3: oldSpill3.cpp old-spill.o oldStates.o old/spill-impl.hpp old/spill.hpp throw.hpp old/regDefs.hpp
	$(CXX) -o $@ $(CXXFLAGS) $(C11X) $(filter %.cpp,$^) $(filter %.o,$^)
	$(call vg)

# test based on regSymbol.hpp, register name and register id operations
oldRegSym: oldRegSym.cpp old-spill.o oldStates.o old/spill-impl.hpp old/spill.hpp throw.hpp old/regDefs.hpp
	$(CXX) -o $@ $(CXXFLAGS) $(C11X) $(filter %.cpp,$^) $(filter %.o,$^)
	$(call vg)
# test based on regSymbol2.hpp, register name and register id operations
testRegSym2: testRegSym2.cpp reg-base.o reg-aurora.o spill2.o regSymbol2.hpp spill2-impl.hpp spill2.hpp throw.hpp reg-base.hpp
	# old/regStates.hpp (seems like an old idea, defunct?)
	$(CXX) -o $@.i $(CXXFLAGS) $(C11X) -dD -E $<
	$(CXX) -o $@ $(CXXFLAGS) $(C11X) $(filter %.cpp,$^) $(filter %.o,$^)
	$(call vg)

oldSymbStates: oldSymbStates.cpp oldStates.o reg-base.o old-spill.o old/symbStates-old.hpp old/spill.hpp throw.hpp symScopeUid.hpp
	$(CXX) -o $@ $(CXXFLAGS) $(C11X) $^
	$(call vg)

prt_regnames: prt_regnames.cpp reg-base.o reg-base.hpp bitfield.hpp throw.hpp
	$(CXX) -o $@ $(CXXFLAGS) $(C11X) $(filter %.cpp,$^) $(filter %.o,$^)
testRegBase.asm: testRegBase
	$(CXX) $(CXXFLAGS) $(C11X) -Wa,-adhln $^.cpp > $@
testRegBase: testRegBase.cpp reg-base.o reg-aurora.o reg-base.hpp bitfield.hpp throw.hpp
	$(CXX) -o $@ $(CXXFLAGS) $(C11X) $(filter %.cpp,$^) $(filter %.o,$^)
	$(call vg)

.PRECIOUS: old-asm.o oldStates.o oldSymbStates-hdr.o
clean:
	rm -f *.o *.lo *.i $(TARGETS) mk*.log bld*.log *.bld
realclean: clean
	rm -f $(patsubst %,%.vg,$(TARGETS))
#
